"""
#----------------------------------------------------------------------------------------------------#
#   ArcaNN: Automatic training of Reactive Chemical Architecture with Neural Networks                #
#   Copyright 2022-2024 ArcaNN developers group <https://github.com/arcann-chem>                     #
#                                                                                                    #
#   SPDX-License-Identifier: AGPL-3.0-only                                                           #
#----------------------------------------------------------------------------------------------------#
Created: 2023/09/04
Last modified: 2024/07/14

Test cases for the lammps module.

Classes
-------
TestReadLammpsData():
    Test case for the 'read_lammps_data' function.
"""

# Standard library modules
import unittest

# Third-party modules
import numpy as np

# Local imports
from arcann_training.common.lammps import read_lammps_data


class TestReadLammpsData(unittest.TestCase):
    """
    Test case for the 'read_lammps_data' function.

    Methods
    -------
    test_successful_read():
        Test successful reading of LAMMPS data format.

    test_successful_read_complex():
        Test successful reading of complex LAMMPS data format.

    test_invalid_data_box():
        Test handling of invalid data: missing box bounds.

    test_invalid_data_types():
        Test handling of invalid data: missing atom types line.

    test_invalid_data_num_atoms():
        Test handling of invalid data: missing number of atoms line.

    test_invalid_data_masses():
        Test handling of invalid data: missing 'Masses' section.

    test_mismatch_data_masses():
        Test handling of mismatched data: mismatch in Masses section.

    test_invalid_data_coordinates():
        Test handling of invalid data: missing 'Atoms' section.

    test_mismatched_atom_count():
        Test handling of mismatched data: atom count mismatch.

    test_no_atoms_section():
        Test handling of missing 'Atoms' section.

    test_no_masses_section():
        Test handling of missing 'Masses' section.
    """

    def test_successful_read(self):
        """
        Test successful reading of LAMMPS data format.
        """
        data = [
            "3 atoms",
            "3 atom types",
            "0.0 10.0 xlo xhi",
            "0.0 10.0 ylo yhi",
            "0.0 10.0 zlo zhi",
            "0.0 0.0 0.0 xy xz yz",
            "Masses",
            "1 12.01",
            "2 16.00",
            "3 1.008",
            "Atoms",
            "1 1 1.0 2.0 3.0",
            "2 2 4.0 5.0 6.0",
            "3 3 7.0 8.0 9.0",
        ]
        num_atoms, num_atom_types, box_bounds, masses, atoms = read_lammps_data(data)
        self.assertEqual(num_atoms, 3)
        self.assertEqual(num_atom_types, 3)
        np.testing.assert_array_equal(box_bounds, np.array([0.0, 10.0, 0.0, 10.0, 0.0, 10.0, 0.0, 0.0, 0.0]))
        self.assertDictEqual(masses, {1: 12.01, 2: 16.00, 3: 1.008})
        np.testing.assert_array_equal(atoms, np.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]))

    def test_successful_read_complex(self):
        """
        Test successful reading of complex LAMMPS data format.
        """
        data = [
            "#  generated by VMD",
            "9  atoms",
            "5  atom types",
            "     0.000000000000      19.915000000000  xlo xhi",
            "0.000000000000      19.915000000000  ylo yhi",
            "0.000000000000      19.915000000000  zlo zhi",
            "Masses",
            "1   30.97376200             # P",
            "2   15.99900000             # O",
            "3   14.00700000             # N",
            "      4   12.01100000             # C",
            "5   1.00800000              # H",
            "Atoms # atomic",
            "      1    1        9.334768450000       8.164262530000       8.682945610000",
            "2    2       10.001794530000       7.244141150000       7.479782240000",
            "3    2        8.727909280000       7.120770950000       9.804921640000",
            "    4    2       10.296537370000       9.313802560000       9.329632010000",
            "5    3        8.004053660000       8.980513390000       8.104167720000",
            "6    4        6.594330390000       8.878250350000       8.645074650000",
            "7    4        8.011145800000      10.087722410000       7.044567180000",
            "8    4        5.910495870000       9.735002680000       7.960553440000",
            "9    5        6.264771230000       8.203744070000       9.409144790000",
        ]
        num_atoms, num_atom_types, box_bounds, masses, atoms = read_lammps_data(data)
        self.assertEqual(num_atoms, 9)
        self.assertEqual(num_atom_types, 5)
        np.testing.assert_array_equal(
            box_bounds,
            np.array([0.0, 19.915, 0.0, 19.915, 0.0, 19.915, None, None, None]),
        )
        self.assertDictEqual(masses, {1: 30.973762, 2: 15.999, 3: 14.007, 4: 12.011, 5: 1.008})
        np.testing.assert_array_equal(
            atoms,
            np.array(
                [
                    [9.33476845, 8.16426253, 8.68294561],
                    [10.00179453, 7.24414115, 7.47978224],
                    [8.72790928, 7.12077095, 9.80492164],
                    [10.29653737, 9.31380256, 9.32963201],
                    [8.00405366, 8.98051339, 8.10416772],
                    [6.59433039, 8.87825035, 8.64507465],
                    [8.0111458, 10.08772241, 7.04456718],
                    [5.91049587, 9.73500268, 7.96055344],
                    [6.26477123, 8.20374407, 9.40914479],
                ]
            ),
        )

    def test_invalid_data_box(self):
        """
        Test handling of invalid data: missing box bounds.
        """
        data = [
            "10 atoms",
            "3 atom types",
            "invalid line",
        ]
        with self.assertRaises(ValueError):
            read_lammps_data(data)

    def test_invalid_data_types(self):
        """
        Test handling of invalid data: missing atom types line.
        """
        data = [
            "10 atoms",
            "invalid line",
        ]
        with self.assertRaises(ValueError):
            read_lammps_data(data)

    def test_invalid_data_num_atoms(self):
        """
        Test handling of invalid data: missing number of atoms line.
        """
        data = [
            "invalid line",
        ]
        with self.assertRaises(ValueError):
            read_lammps_data(data)

    def test_invalid_data_masses(self):
        """
        Test handling of invalid data: missing 'Masses' section.
        """
        data = [
            "3 atoms",
            "3 atom types",
            "0.0 10.0 xlo xhi",
            "0.0 10.0 ylo yhi",
            "0.0 10.0 zlo zhi",
            "0.0 0.0 0.0 xy xz yz",
            "Masses",
        ]
        with self.assertRaises(ValueError):
            read_lammps_data(data)

    def test_mismatch_data_masses(self):
        """
        Test handling of mismatched data: mismatch in Masses section.
        """
        data = [
            "3 atoms",
            "2 atom types",
            "0.0 10.0 xlo xhi",
            "0.0 10.0 ylo yhi",
            "0.0 10.0 zlo zhi",
            "0.0 0.0 0.0 xy xz yz",
            "Masses",
            "1 12.01",
            "2 16.00",
            "3 1.008",
            "Atoms",
            "1 1 1.0 2.0 3.0",
            "2 2 4.0 5.0 6.0",
            "3 3 7.0 8.0 9.0",
        ]
        with self.assertRaises(ValueError):
            read_lammps_data(data)

    def test_invalid_data_coordinates(self):
        """
        Test successful reading of LAMMPS data format.
        """
        data = [
            "3 atoms",
            "2 atom types",
            "0.0 10.0 xlo xhi",
            "0.0 10.0 ylo yhi",
            "0.0 10.0 zlo zhi",
            "0.0 0.0 0.0 xy xz yz",
            "Masses",
            "1 12.01",
            "2 16.00",
            "3 1.008",
            "Atoms",
        ]
        with self.assertRaises(ValueError):
            read_lammps_data(data)

    def test_mismatched_atom_count(self):
        """
        Test handling of invalid data: missing 'Atoms' section.
        """
        data = [
            "2 atoms",
            "3 atom types",
            "0.0 10.0 xlo xhi",
            "0.0 10.0 ylo yhi",
            "0.0 10.0 zlo zhi",
            "0.0 0.0 0.0 xy xz yz",
            "Masses",
            "1 12.01",
            "2 16.00",
            "3 1.008",
            "Atoms",
            "1 1 1.0 2.0 3.0",
            "2 2 4.0 5.0 6.0",
            "3 3 7.0 8.0 9.0",
        ]
        with self.assertRaises(ValueError):
            read_lammps_data(data)

    def test_no_atoms_section(self):
        """
        Test handling of missing 'Atoms' section.
        """
        data = [
            "10 atoms",
            "3 atom types",
            "0.0 10.0 xlo xhi",
            "0.0 10.0 ylo yhi",
            "0.0 10.0 zlo zhi",
            "0.0 0.0 0.0 xy xz yz",
            "Masses",
            "1 12.01",
            "2 16.00",
            "3 1.008",
        ]
        with self.assertRaises(ValueError):
            read_lammps_data(data)

    def test_no_masses_section(self):
        """
        Test handling of missing 'Masses' section.
        """
        data = [
            "10 atoms",
            "3 atom types",
            "0.0 10.0 xlo xhi",
            "0.0 10.0 ylo yhi",
            "0.0 10.0 zlo zhi",
            "0.0 0.0 0.0 xy xz yz",
        ]
        with self.assertRaises(ValueError):
            read_lammps_data(data)


if __name__ == "__main__":
    unittest.main()
